webpackJsonp([0x72fef1d323c2],{403:function(n,a){n.exports={data:{allMarkdownRemark:{edges:[{node:{html:'<p>class: middle</p>\n<h2>Coder Camps</h2>\n<h3>Programming with Javascript</h3>\n<p>wifi:exeterGuest\npw: Fullstackweb</p>\n<hr>\n<p>class: middle</p>\n<h2>Accounts &#x26;&#x26; Other Needed</h2>\n<h3>Exeter LMS (learn portal) <a href="https://login.exeterlms.com">Link</a></h3>\n<h3>Github (Add to LMS Profile) <a href="https://github.com/">Link</a></h3>\n<h3>Coder Camps Troops (slack) <a href="https://codercampstroops.slack.com">Link</a></h3>\n<h3>Editor (VSCode, Sublime, vim) <a href="https://code.visualstudio.com/">Link</a></h3>\n<h3>Install Node, Git, <a href="https://nodejs.org/en/">Node</a> <a href="https://git-scm.com/">Git</a></h3>\n<h3>Open your Terminal / Cmd</h3>\n<hr>\n<p>class: middle</p>\n<h1>The meat</h1>\n<h3>JavaScript, the core language (ECMAScript)</h3>\n<ul>\n<li>ECMAScript such as ES3, ES5, and <del>ES6</del> ES 2015</li>\n<li>Runs all the places</li>\n<li>\n<p>object oriented programming (OOP)</p>\n<ul>\n<li>C++, Object Pascal, Java, Python etc</li>\n</ul>\n</li>\n<li>\n<p>function programing</p>\n<ul>\n<li>Common Lisp, Scheme,Clojure, Erlang, OCaml, Haskell, and F#</li>\n</ul>\n</li>\n</ul>\n<p>???\nOOP -> inheritance for code reuse and extensibility in the form of either\nclasses or prototypes. Composition, inheritance, and delegation Polymorphism FP\n-> calling a function f twice with the same value for an argument x will produce\nthe same result f(x) each time First-class and higher-order functions Pure\nfunctions Recursion</p>\n<hr>\n<p>class: middle</p>\n<h1>So which is Javascript ?</h1>\n<p><img src="https://emojipedia-us.s3.amazonaws.com/thumbs/120/google/119/confused-face_1f615.png" alt="confused"></p>\n<blockquote>\n<p>Prototype-based programming is a style of object-oriented programming in which\nclasses are not present, and behavior reuse (known as inheritance in\nclass-based languages) is performed via a process of cloning existing objects\nthat serve as prototypes. This model can also be known as classless,\nprototype-oriented or instance-based programming.</p>\n</blockquote>\n<hr>\n<p>class: middle</p>\n<h1>JavaScript is a loosely typed or a dynamic language.</h1>\n<ul>\n<li>which means you do not declare the data types of variables explicitly.</li>\n<li>In many cases JavaScript performs conversions automatically when they are needed.</li>\n</ul>\n<hr>\n<p>class: middle</p>\n<h2>JS Types</h2>\n<h3>Six data types that are primitives:</h3>\n<ul>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number</li>\n<li>String</li>\n<li>Symbol (new in ECMAScript 6)</li>\n<li>Object</li>\n</ul>\n<hr>\n<p>class: middle</p>\n<h2>JS Variables</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token string">"sedan"</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Bobby"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">"Smith"</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h2>JS Functions</h2>\n<blockquote>\n<p>execute, do something You can reuse code: Define the code once, and use it\nmany times.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Function is called, return value will end up in x</span>\n<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token comment">// Function returns the product of a and b</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">z</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//function expression</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>???\nA JavaScript function is defined with the function keyword, followed by a name,\nfollowed by parentheses (). Function names can contain letters, digits,\nunderscores, and dollar signs (same rules as variables). The parentheses may\ninclude parameter names separated by commas: (parameter1, parameter2, â€¦) The\ncode to be executed, by the function, is placed inside curly brackets: {}\nfunction name(parameter1, parameter2, parameter3) { code to be executed }\nFunction parameters are the names listed in the function definition. Function\narguments are the real values received by the function when it is invoked.\nInside the function, the arguments (the parameters) behave as local variables.</p>\n<hr>\n<p>class: middle</p>\n<h2>Create a function</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">addDivideByTwo</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//result = 10</span>\n</code></pre>\n      </div>\n<p>???</p>\n<p>Answer Town</p>\n<p>function addDivideByTwo(num1, num2) { return ((num1 + num2) / 2); }</p>\n<hr>\n<p>class: middle</p>\n<h1>Scope</h1>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hoist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">hoist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h1>Hositing</h1>\n<blockquote>\n<p>Function declarations are hoisted over variable declarations but not over\nvariable assignments.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> double<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> double<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output type: ?</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h1>JS Remember ES 2015 ?</h1>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">sameFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h1>JS Scope and Context</h1>\n<h3>Global Scope</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Billy Bob"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'Billy Bob\'</span>\n\n<span class="token keyword">function</span> <span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'name\' is accessible here and everywhere else</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'Billy Bob\'</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h1>Git and Version Control</h1>\n<ul>\n<li>What is version control</li>\n<li>\n<p>Other options</p>\n<ul>\n<li>TFS</li>\n<li>Subversion</li>\n</ul>\n</li>\n<li>Git work flow (aka, making PRâ€™s)</li>\n<li>(Hey Josue, whatâ€™s a PR?)</li>\n</ul>\n<hr>\n<p>class: middle</p>\n<p><img src="https://image.slidesharecdn.com/git-150804144903-lva1-app6892/95/git-workflow-10-638.jpg?cb=1438699817" alt="git flow"></p>\n<hr>',internal:{content:'---\ntitle: "JavaScript Intro"\ncourseId:  "CFSG105"\ncirriculum:\n  - "Web / Full Stack / Software Development"\ntype: "slide"\ndraft: false\n---\n\nclass: middle\n\n## Coder Camps\n\n### Programming with Javascript\n\nwifi:exeterGuest\npw: Fullstackweb\n\n---\n\nclass: middle\n\n## Accounts && Other Needed\n\n### Exeter LMS (learn portal) [Link](https://login.exeterlms.com)\n\n### Github (Add to LMS Profile) [Link](https://github.com/)\n\n### Coder Camps Troops (slack) [Link](https://codercampstroops.slack.com)\n\n### Editor (VSCode, Sublime, vim) [Link](https://code.visualstudio.com/)\n\n### Install Node, Git, [Node](https://nodejs.org/en/) [Git](https://git-scm.com/)\n\n### Open your Terminal / Cmd\n\n---\n\nclass: middle\n\n# The meat\n\n### JavaScript, the core language (ECMAScript)\n\n* ECMAScript such as ES3, ES5, and ~~ES6~~ ES 2015\n* Runs all the places\n* object oriented programming (OOP)\n  * C++, Object Pascal, Java, Python etc\n* function programing\n  * Common Lisp, Scheme,Clojure, Erlang, OCaml, Haskell, and F#\n\n???\nOOP -> inheritance for code reuse and extensibility in the form of either\nclasses or prototypes. Composition, inheritance, and delegation Polymorphism FP\n-> calling a function f twice with the same value for an argument x will produce\nthe same result f(x) each time First-class and higher-order functions Pure\nfunctions Recursion\n\n---\n\nclass: middle\n\n# So which is Javascript ?\n\n![confused](https://emojipedia-us.s3.amazonaws.com/thumbs/120/google/119/confused-face_1f615.png)\n\n> Prototype-based programming is a style of object-oriented programming in which\n> classes are not present, and behavior reuse (known as inheritance in\n> class-based languages) is performed via a process of cloning existing objects\n> that serve as prototypes. This model can also be known as classless,\n> prototype-oriented or instance-based programming.\n\n---\n\nclass: middle\n\n# JavaScript is a loosely typed or a dynamic language.\n\n* which means you do not declare the data types of variables explicitly.\n* In many cases JavaScript performs conversions automatically when they are needed.\n\n---\n\nclass: middle\n\n## JS Types\n\n### Six data types that are primitives:\n\n* Boolean\n* Null\n* Undefined\n* Number\n* String\n* Symbol (new in ECMAScript 6)\n* Object\n\n---\n\nclass: middle\n\n## JS Variables\n\n```JavaScript\nvar car = "sedan";\nlet name = "Bobby";\nconst lastName = "Smith";\n```\n\n---\n\nclass: middle\n\n## JS Functions\n\n> execute, do something You can reuse code: Define the code once, and use it\n> many times.\n\n```javascript\nlet x = myFunction(4, 3); // Function is called, return value will end up in x\nfunction myFunction(a, b) {\n  return a * b; // Function returns the product of a and b\n}\n\nlet z = function(a, b) {\n  //function expression\n  return a * b;\n};\n```\n\n???\nA JavaScript function is defined with the function keyword, followed by a name,\nfollowed by parentheses (). Function names can contain letters, digits,\nunderscores, and dollar signs (same rules as variables). The parentheses may\ninclude parameter names separated by commas: (parameter1, parameter2, ...) The\ncode to be executed, by the function, is placed inside curly brackets: {}\nfunction name(parameter1, parameter2, parameter3) { code to be executed }\nFunction parameters are the names listed in the function definition. Function\narguments are the real values received by the function when it is invoked.\nInside the function, the arguments (the parameters) behave as local variables.\n\n---\n\nclass: middle\n\n## Create a function\n\n```javascript\nlet result = addDivideByTwo(16, 4); //result = 10\n```\n\n???\n\nAnswer Town\n\nfunction addDivideByTwo(num1, num2) { return ((num1 + num2) / 2); }\n\n---\n\nclass: middle\n\n# Scope\n\n```javascript\nfunction hoist() {\n  a = 20;\n  var b = 100;\n}\nhoist();\nconsole.log(a);\n/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/\nconsole.log(b);\n```\n\n---\n\nclass: middle\n\n# Hositing\n\n> Function declarations are hoisted over variable declarations but not over\n> variable assignments.\n\n```javascript\nvar double;\n\nfunction double(num) {\n  return num * 2;\n}\n\nconsole.log(typeof double); // Output type: ?\n```\n\n---\n\nclass: middle\n\n# JS Remember ES 2015 ?\n\n```javascript\nlet x = myFunction(4, 3);\n\nlet myFunction = (a, b) => a * b;\n\nfunction sameFunction(a, b) {\n  return a * b;\n}\n```\n\n---\n\nclass: middle\n\n# JS Scope and Context\n\n### Global Scope\n\n```javascript\nvar name = "Billy Bob";\nconsole.log(name); // logs \'Billy Bob\'\n\nfunction logName() {\n  console.log(name); // \'name\' is accessible here and everywhere else\n}\n\nlogName(); // logs \'Billy Bob\'\n```\n\n---\n\nclass: middle\n\n# Git and Version Control\n\n* What is version control\n* Other options\n  * TFS\n  * Subversion\n* Git work flow (aka, making PR\'s)\n* (Hey Josue, what\'s a PR?)\n\n---\n\nclass: middle\n\n![git flow](https://image.slidesharecdn.com/git-150804144903-lva1-app6892/95/git-workflow-10-638.jpg?cb=1438699817)\n\n---\n'},fields:{slug:"/courses/coding-from-scratch/slides/javaScript-intro/"}}}]}},pathContext:{slug:"/courses/coding-from-scratch/slides/javaScript-intro/"}}}});
//# sourceMappingURL=path---courses-coding-from-scratch-slides-java-script-intro-c4ad3f9b4a0fcdd2c0f7.js.map