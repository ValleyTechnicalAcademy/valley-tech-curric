{"version":3,"sources":["webpack:///path---courses-database-basics-slides-more-rdms-28ca29ba0689c13f516f.js","webpack:///./.cache/json/courses-database-basics-slides-more-rdms.json"],"names":["webpackJsonp","411","module","exports","data","allMarkdownRemark","edges","node","html","internal","content","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,mBAAqBC,QAAUC,MAAQC,KAAA,27RAA4lOC,UAAwnEC,QAAA,q5HAA85HC,QAAWC,KAAA,mDAAyDC,aAAgBD,KAAA","file":"path---courses-database-basics-slides-more-rdms-28ca29ba0689c13f516f.js","sourcesContent":["webpackJsonp([227116428326523],{\n\n/***/ 411:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>class: middle center</p>\\n<h2>Joins</h2>\\n<p>.left[</p>\\n<ul>\\n<li><em>Join:</em> SQL Command to join two or more tables together.</li>\\n<li>\\n<p><em>Inner Join:</em> SQL command to join two tables, only including records which have data present in both tables.</p>\\n<ul>\\n<li><strong>An inner join only includes the specified columns from a row if it can be paired up with a row in the joined table.</strong></li>\\n</ul>\\n</li>\\n<li>\\n<p><em>Outer Join:</em> SQL command to join two tables, including all of the records from one table, along with the matching values from the other.</p>\\n<ul>\\n<li><strong>if a matching row exists in the other table, then those columns are included as well.</strong>\\n]</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle center\\n<img src=\\\"https://i.stack.imgur.com/ytO9K.png\\\" alt=\\\"inline\\\"></p>\\n<hr>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> Name<span class=\\\"token punctuation\\\">,</span> Title\\n<span class=\\\"token keyword\\\">FROM</span> tracks\\n<span class=\\\"token keyword\\\">JOIN</span> albums <span class=\\\"token keyword\\\">ON</span> tracks<span class=\\\"token punctuation\\\">.</span>AlbumId <span class=\\\"token operator\\\">=</span> albums<span class=\\\"token punctuation\\\">.</span>AlbumId <span class=\\\"token comment\\\">//USING (AlbumId)</span>\\n<span class=\\\"token keyword\\\">WHERE</span> ArtistId <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\">--another join</span>\\n<span class=\\\"token keyword\\\">SELECT</span> title<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>first_name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">||</span> last_name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> name\\n<span class=\\\"token keyword\\\">FROM</span> books\\n<span class=\\\"token keyword\\\">JOIN</span> users <span class=\\\"token keyword\\\">ON</span> books<span class=\\\"token punctuation\\\">.</span>user_id <span class=\\\"token operator\\\">=</span> users<span class=\\\"token punctuation\\\">.</span>user_id\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle center</p>\\n<h2>Views</h2>\\n<ul>\\n<li>represent a query to the user as a table would appear.</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h2>Transactions</h2>\\n<ul>\\n<li>Transactions: A Transaction is a means of grouping database actions into a reversible batch.</li>\\n<li>Discussed yesterday, recordered linear BEGIN, ROLLBACK, END/COMMIT</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h2>Procedures</h2>\\n<ul>\\n<li>Stored Procedure: A reusable sql query which is optimized for performance.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token keyword\\\">PROCEDURE</span> NewApplicationUser <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@UserName</span> <span class=\\\"token keyword\\\">VARCHAR</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@password</span> <span class=\\\"token keyword\\\">VARCHAR</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">AS</span>\\n<span class=\\\"token keyword\\\">BEGIN</span>\\n<span class=\\\"token keyword\\\">DECLARE</span> <span class=\\\"token variable\\\">@user_id</span> <span class=\\\"token keyword\\\">INT</span>\\n<span class=\\\"token keyword\\\">INSERT</span> <span class=\\\"token keyword\\\">INTO</span> Users <span class=\\\"token keyword\\\">VALUES</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@UserName</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token variable\\\">@user_id</span> <span class=\\\"token operator\\\">=</span> user_id <span class=\\\"token keyword\\\">FROM</span> Users <span class=\\\"token keyword\\\">WHERE</span> UserName <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@UserName</span>\\n<span class=\\\"token keyword\\\">INSERT</span> <span class=\\\"token keyword\\\">INTO</span> Passwords <span class=\\\"token keyword\\\">VALUES</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@user_id</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@password</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">END</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h1>Creating a table</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\">--creating a persons table</span>\\n<span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token keyword\\\">TABLE</span> Persons <span class=\\\"token punctuation\\\">(</span>\\n    Person_id <span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span> <span class=\\\"token keyword\\\">PRIMARY</span> <span class=\\\"token keyword\\\">KEY</span><span class=\\\"token punctuation\\\">,</span>\\n    LastName <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    FirstName <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    Address <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    City <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--creating an orders table</span>\\n<span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token keyword\\\">TABLE</span> Orders <span class=\\\"token punctuation\\\">(</span>\\n    Order_id <span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span> <span class=\\\"token keyword\\\">PRIMARY</span> <span class=\\\"token keyword\\\">KEY</span><span class=\\\"token punctuation\\\">,</span>\\n    OrderNumber <span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">,</span>\\n    Person_id <span class=\\\"token keyword\\\">int</span> <span class=\\\"token keyword\\\">FOREIGN</span> <span class=\\\"token keyword\\\">KEY</span> <span class=\\\"token keyword\\\">REFERENCES</span> Persons<span class=\\\"token punctuation\\\">(</span>Person_id<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle center</p>\\n<h2>HandsOnChallenge</h2>\\n<p>.left[</p>\\n<ul>\\n<li>create a new database called ‘biblioteca’</li>\\n<li>\\n<p>create a table called users</p>\\n<ol>\\n<li>It will have the following fields: firstname, lastname, email, phonenumber</li>\\n<li>All fields are required!</li>\\n<li>Add 5 of your favorite literate friends.</li>\\n</ol>\\n</li>\\n<li>\\n<p>create a table called genres</p>\\n<ol>\\n<li>It will have the following fields: genre_type</li>\\n<li>Add 3 types of book genre, like fiction, kids</li>\\n</ol>\\n</li>\\n<li>\\n<p>create a table called books</p>\\n<ol>\\n<li>It will have the following fields: title, author, year, genre<em>id (refering to the genre type from that table)and user</em>id (this will be the user who has this book) <strong>HINT</strong> like a foreign key, ‘member?</li>\\n<li>All fields are required!</li>\\n<li>Add 10 books, each of your users should have 2 books\\n]</li>\\n</ol>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h2>HandsOnChallenge</h2>\\n<p>.left[</p>\\n<ol>\\n<li>Query ‘books’ to show title, and user’s fullname that has checked out this book</li>\\n<li>Query ‘books’ and show a total count of books by genre with the genre type(group by) ordered from most to least</li>\\n<li>Query ‘users’ to show fullname, book title, authory, and genre type. Order by book title.\\n]</li>\\n</ol>\\n<hr>\\n<p>class: middle center</p>\\n<h3>Pirates HandsOnChallenge</h3>\\n<p>.left-column[</p>\\n<p>.left[</p>\\n<h6>Pirates - 10</h6>\\n<ol>\\n<li>Family Name</li>\\n<li>Rank</li>\\n<li>Beard (Boolean)</li>\\n<li>Nick Name</li>\\n<li>Birth Country</li>\\n<li>Worth. (Value in shillings)</li>\\n<li>Date of Death</li>\\n<li>Primary Key(Pirate_Id)\\n] ]</li>\\n</ol>\\n<p>.right-column[</p>\\n<h5>Ships - 10</h5>\\n<ol start=\\\"9\\\">\\n<li>Crew Size</li>\\n<li>Name</li>\\n<li>Ship Class</li>\\n<li>Number of Cannons</li>\\n<li>Primary Key(Ship_id)</li>\\n</ol>\\n<h5>Ownerships table</h5>\\n<ol>\\n<li>Primary Key(owner_id)</li>\\n<li>Country Of Origin</li>\\n<li>Current Owner, must be pirate. <em>HINT</em> Foreign Key(Pirate_Id)</li>\\n<li>Ship Reference (Foreign Key Ship_Id)</li>\\n</ol>\\n<p>]</p>\",\"internal\":{\"content\":\"---\\ntitle: \\\"Database Joins\\\"\\ncourseId:  \\\"FSWG103\\\"\\ncirriculum:\\n  - \\\"Software Development\\\"\\ntype: \\\"slide\\\"\\ndraft: false\\n---\\n\\nclass: middle center\\n\\n## Joins\\n\\n.left[\\n\\n* _Join:_ SQL Command to join two or more tables together.\\n* _Inner Join:_ SQL command to join two tables, only including records which have data present in both tables.\\n  * **An inner join only includes the specified columns from a row if it can be paired up with a row in the joined table.**\\n* _Outer Join:_ SQL command to join two tables, including all of the records from one table, along with the matching values from the other.\\n  * **if a matching row exists in the other table, then those columns are included as well.**\\n    ]\\n\\n---\\n\\nclass: middle center\\n![inline](https://i.stack.imgur.com/ytO9K.png)\\n\\n---\\n\\n```sql\\nSELECT Name, Title\\nFROM tracks\\nJOIN albums ON tracks.AlbumId = albums.AlbumId //USING (AlbumId)\\nWHERE ArtistId = 1\\n\\n--another join\\nSELECT title, (first_name || \\\" \\\" || last_name) as name\\nFROM books\\nJOIN users ON books.user_id = users.user_id\\n```\\n\\n---\\n\\nclass: middle center\\n\\n## Views\\n\\n* represent a query to the user as a table would appear.\\n\\n---\\n\\nclass: middle center\\n\\n## Transactions\\n\\n* Transactions: A Transaction is a means of grouping database actions into a reversible batch.\\n* Discussed yesterday, recordered linear BEGIN, ROLLBACK, END/COMMIT\\n\\n---\\n\\nclass: middle center\\n\\n## Procedures\\n\\n* Stored Procedure: A reusable sql query which is optimized for performance.\\n\\n```sql\\nCREATE PROCEDURE NewApplicationUser (@UserName VARCHAR(50), @password VARCHAR(50)\\nAS\\nBEGIN\\nDECLARE @user_id INT\\nINSERT INTO Users VALUES (@UserName)\\nSELECT @user_id = user_id FROM Users WHERE UserName = @UserName\\nINSERT INTO Passwords VALUES (@user_id, @password)\\nEND\\n```\\n\\n---\\n\\n# Creating a table\\n\\n```sql\\n--creating a persons table\\nCREATE TABLE Persons (\\n    Person_id int NOT NULL PRIMARY KEY,\\n    LastName varchar(255),\\n    FirstName varchar(255),\\n    Address varchar(255),\\n    City varchar(255)\\n);\\n\\n--creating an orders table\\nCREATE TABLE Orders (\\n    Order_id int NOT NULL PRIMARY KEY,\\n    OrderNumber int NOT NULL,\\n    Person_id int FOREIGN KEY REFERENCES Persons(Person_id)\\n);\\n```\\n\\n---\\n\\nclass: middle center\\n\\n## HandsOnChallenge\\n\\n.left[\\n\\n* create a new database called 'biblioteca'\\n* create a table called users\\n  1. It will have the following fields: firstname, lastname, email, phonenumber\\n  2. All fields are required!\\n  3. Add 5 of your favorite literate friends.\\n* create a table called genres\\n  1. It will have the following fields: genre_type\\n  2. Add 3 types of book genre, like fiction, kids\\n* create a table called books\\n  1. It will have the following fields: title, author, year, genre_id (refering to the genre type from that table)and user_id (this will be the user who has this book) **HINT** like a foreign key, 'member?\\n  2. All fields are required!\\n  3. Add 10 books, each of your users should have 2 books\\n     ]\\n\\n---\\n\\nclass: middle center\\n\\n## HandsOnChallenge\\n\\n.left[\\n\\n1. Query 'books' to show title, and user's fullname that has checked out this book\\n2. Query 'books' and show a total count of books by genre with the genre type(group by) ordered from most to least\\n3. Query 'users' to show fullname, book title, authory, and genre type. Order by book title.\\n   ]\\n\\n---\\n\\nclass: middle center\\n\\n### Pirates HandsOnChallenge\\n\\n.left-column[\\n\\n.left[\\n\\n###### Pirates - 10\\n\\n1. Family Name\\n2. Rank\\n3. Beard (Boolean)\\n4. Nick Name\\n5. Birth Country\\n6. Worth. (Value in shillings)\\n7. Date of Death\\n8. Primary Key(Pirate_Id)\\n   ] ]\\n\\n.right-column[\\n\\n##### Ships - 10\\n\\n9. Crew Size\\n10. Name\\n11. Ship Class\\n12. Number of Cannons\\n13. Primary Key(Ship_id)\\n\\n##### Ownerships table\\n\\n1. Primary Key(owner_id)\\n2. Country Of Origin\\n3. Current Owner, must be pirate. _HINT_ Foreign Key(Pirate_Id)\\n4. Ship Reference (Foreign Key Ship_Id)\\n\\n]\\n\"},\"fields\":{\"slug\":\"/courses/database basics/slides/more-rdms/\"}}}]}},\"pathContext\":{\"slug\":\"/courses/database basics/slides/more-rdms/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---courses-database-basics-slides-more-rdms-28ca29ba0689c13f516f.js","module.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>class: middle center</p>\\n<h2>Joins</h2>\\n<p>.left[</p>\\n<ul>\\n<li><em>Join:</em> SQL Command to join two or more tables together.</li>\\n<li>\\n<p><em>Inner Join:</em> SQL command to join two tables, only including records which have data present in both tables.</p>\\n<ul>\\n<li><strong>An inner join only includes the specified columns from a row if it can be paired up with a row in the joined table.</strong></li>\\n</ul>\\n</li>\\n<li>\\n<p><em>Outer Join:</em> SQL command to join two tables, including all of the records from one table, along with the matching values from the other.</p>\\n<ul>\\n<li><strong>if a matching row exists in the other table, then those columns are included as well.</strong>\\n]</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle center\\n<img src=\\\"https://i.stack.imgur.com/ytO9K.png\\\" alt=\\\"inline\\\"></p>\\n<hr>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> Name<span class=\\\"token punctuation\\\">,</span> Title\\n<span class=\\\"token keyword\\\">FROM</span> tracks\\n<span class=\\\"token keyword\\\">JOIN</span> albums <span class=\\\"token keyword\\\">ON</span> tracks<span class=\\\"token punctuation\\\">.</span>AlbumId <span class=\\\"token operator\\\">=</span> albums<span class=\\\"token punctuation\\\">.</span>AlbumId <span class=\\\"token comment\\\">//USING (AlbumId)</span>\\n<span class=\\\"token keyword\\\">WHERE</span> ArtistId <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\">--another join</span>\\n<span class=\\\"token keyword\\\">SELECT</span> title<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>first_name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">||</span> last_name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> name\\n<span class=\\\"token keyword\\\">FROM</span> books\\n<span class=\\\"token keyword\\\">JOIN</span> users <span class=\\\"token keyword\\\">ON</span> books<span class=\\\"token punctuation\\\">.</span>user_id <span class=\\\"token operator\\\">=</span> users<span class=\\\"token punctuation\\\">.</span>user_id\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle center</p>\\n<h2>Views</h2>\\n<ul>\\n<li>represent a query to the user as a table would appear.</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h2>Transactions</h2>\\n<ul>\\n<li>Transactions: A Transaction is a means of grouping database actions into a reversible batch.</li>\\n<li>Discussed yesterday, recordered linear BEGIN, ROLLBACK, END/COMMIT</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h2>Procedures</h2>\\n<ul>\\n<li>Stored Procedure: A reusable sql query which is optimized for performance.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token keyword\\\">PROCEDURE</span> NewApplicationUser <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@UserName</span> <span class=\\\"token keyword\\\">VARCHAR</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@password</span> <span class=\\\"token keyword\\\">VARCHAR</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">AS</span>\\n<span class=\\\"token keyword\\\">BEGIN</span>\\n<span class=\\\"token keyword\\\">DECLARE</span> <span class=\\\"token variable\\\">@user_id</span> <span class=\\\"token keyword\\\">INT</span>\\n<span class=\\\"token keyword\\\">INSERT</span> <span class=\\\"token keyword\\\">INTO</span> Users <span class=\\\"token keyword\\\">VALUES</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@UserName</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token variable\\\">@user_id</span> <span class=\\\"token operator\\\">=</span> user_id <span class=\\\"token keyword\\\">FROM</span> Users <span class=\\\"token keyword\\\">WHERE</span> UserName <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@UserName</span>\\n<span class=\\\"token keyword\\\">INSERT</span> <span class=\\\"token keyword\\\">INTO</span> Passwords <span class=\\\"token keyword\\\">VALUES</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@user_id</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@password</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">END</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h1>Creating a table</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\">--creating a persons table</span>\\n<span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token keyword\\\">TABLE</span> Persons <span class=\\\"token punctuation\\\">(</span>\\n    Person_id <span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span> <span class=\\\"token keyword\\\">PRIMARY</span> <span class=\\\"token keyword\\\">KEY</span><span class=\\\"token punctuation\\\">,</span>\\n    LastName <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    FirstName <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    Address <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    City <span class=\\\"token keyword\\\">varchar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--creating an orders table</span>\\n<span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token keyword\\\">TABLE</span> Orders <span class=\\\"token punctuation\\\">(</span>\\n    Order_id <span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span> <span class=\\\"token keyword\\\">PRIMARY</span> <span class=\\\"token keyword\\\">KEY</span><span class=\\\"token punctuation\\\">,</span>\\n    OrderNumber <span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">,</span>\\n    Person_id <span class=\\\"token keyword\\\">int</span> <span class=\\\"token keyword\\\">FOREIGN</span> <span class=\\\"token keyword\\\">KEY</span> <span class=\\\"token keyword\\\">REFERENCES</span> Persons<span class=\\\"token punctuation\\\">(</span>Person_id<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle center</p>\\n<h2>HandsOnChallenge</h2>\\n<p>.left[</p>\\n<ul>\\n<li>create a new database called ‘biblioteca’</li>\\n<li>\\n<p>create a table called users</p>\\n<ol>\\n<li>It will have the following fields: firstname, lastname, email, phonenumber</li>\\n<li>All fields are required!</li>\\n<li>Add 5 of your favorite literate friends.</li>\\n</ol>\\n</li>\\n<li>\\n<p>create a table called genres</p>\\n<ol>\\n<li>It will have the following fields: genre_type</li>\\n<li>Add 3 types of book genre, like fiction, kids</li>\\n</ol>\\n</li>\\n<li>\\n<p>create a table called books</p>\\n<ol>\\n<li>It will have the following fields: title, author, year, genre<em>id (refering to the genre type from that table)and user</em>id (this will be the user who has this book) <strong>HINT</strong> like a foreign key, ‘member?</li>\\n<li>All fields are required!</li>\\n<li>Add 10 books, each of your users should have 2 books\\n]</li>\\n</ol>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h2>HandsOnChallenge</h2>\\n<p>.left[</p>\\n<ol>\\n<li>Query ‘books’ to show title, and user’s fullname that has checked out this book</li>\\n<li>Query ‘books’ and show a total count of books by genre with the genre type(group by) ordered from most to least</li>\\n<li>Query ‘users’ to show fullname, book title, authory, and genre type. Order by book title.\\n]</li>\\n</ol>\\n<hr>\\n<p>class: middle center</p>\\n<h3>Pirates HandsOnChallenge</h3>\\n<p>.left-column[</p>\\n<p>.left[</p>\\n<h6>Pirates - 10</h6>\\n<ol>\\n<li>Family Name</li>\\n<li>Rank</li>\\n<li>Beard (Boolean)</li>\\n<li>Nick Name</li>\\n<li>Birth Country</li>\\n<li>Worth. (Value in shillings)</li>\\n<li>Date of Death</li>\\n<li>Primary Key(Pirate_Id)\\n] ]</li>\\n</ol>\\n<p>.right-column[</p>\\n<h5>Ships - 10</h5>\\n<ol start=\\\"9\\\">\\n<li>Crew Size</li>\\n<li>Name</li>\\n<li>Ship Class</li>\\n<li>Number of Cannons</li>\\n<li>Primary Key(Ship_id)</li>\\n</ol>\\n<h5>Ownerships table</h5>\\n<ol>\\n<li>Primary Key(owner_id)</li>\\n<li>Country Of Origin</li>\\n<li>Current Owner, must be pirate. <em>HINT</em> Foreign Key(Pirate_Id)</li>\\n<li>Ship Reference (Foreign Key Ship_Id)</li>\\n</ol>\\n<p>]</p>\",\"internal\":{\"content\":\"---\\ntitle: \\\"Database Joins\\\"\\ncourseId:  \\\"FSWG103\\\"\\ncirriculum:\\n  - \\\"Software Development\\\"\\ntype: \\\"slide\\\"\\ndraft: false\\n---\\n\\nclass: middle center\\n\\n## Joins\\n\\n.left[\\n\\n* _Join:_ SQL Command to join two or more tables together.\\n* _Inner Join:_ SQL command to join two tables, only including records which have data present in both tables.\\n  * **An inner join only includes the specified columns from a row if it can be paired up with a row in the joined table.**\\n* _Outer Join:_ SQL command to join two tables, including all of the records from one table, along with the matching values from the other.\\n  * **if a matching row exists in the other table, then those columns are included as well.**\\n    ]\\n\\n---\\n\\nclass: middle center\\n![inline](https://i.stack.imgur.com/ytO9K.png)\\n\\n---\\n\\n```sql\\nSELECT Name, Title\\nFROM tracks\\nJOIN albums ON tracks.AlbumId = albums.AlbumId //USING (AlbumId)\\nWHERE ArtistId = 1\\n\\n--another join\\nSELECT title, (first_name || \\\" \\\" || last_name) as name\\nFROM books\\nJOIN users ON books.user_id = users.user_id\\n```\\n\\n---\\n\\nclass: middle center\\n\\n## Views\\n\\n* represent a query to the user as a table would appear.\\n\\n---\\n\\nclass: middle center\\n\\n## Transactions\\n\\n* Transactions: A Transaction is a means of grouping database actions into a reversible batch.\\n* Discussed yesterday, recordered linear BEGIN, ROLLBACK, END/COMMIT\\n\\n---\\n\\nclass: middle center\\n\\n## Procedures\\n\\n* Stored Procedure: A reusable sql query which is optimized for performance.\\n\\n```sql\\nCREATE PROCEDURE NewApplicationUser (@UserName VARCHAR(50), @password VARCHAR(50)\\nAS\\nBEGIN\\nDECLARE @user_id INT\\nINSERT INTO Users VALUES (@UserName)\\nSELECT @user_id = user_id FROM Users WHERE UserName = @UserName\\nINSERT INTO Passwords VALUES (@user_id, @password)\\nEND\\n```\\n\\n---\\n\\n# Creating a table\\n\\n```sql\\n--creating a persons table\\nCREATE TABLE Persons (\\n    Person_id int NOT NULL PRIMARY KEY,\\n    LastName varchar(255),\\n    FirstName varchar(255),\\n    Address varchar(255),\\n    City varchar(255)\\n);\\n\\n--creating an orders table\\nCREATE TABLE Orders (\\n    Order_id int NOT NULL PRIMARY KEY,\\n    OrderNumber int NOT NULL,\\n    Person_id int FOREIGN KEY REFERENCES Persons(Person_id)\\n);\\n```\\n\\n---\\n\\nclass: middle center\\n\\n## HandsOnChallenge\\n\\n.left[\\n\\n* create a new database called 'biblioteca'\\n* create a table called users\\n  1. It will have the following fields: firstname, lastname, email, phonenumber\\n  2. All fields are required!\\n  3. Add 5 of your favorite literate friends.\\n* create a table called genres\\n  1. It will have the following fields: genre_type\\n  2. Add 3 types of book genre, like fiction, kids\\n* create a table called books\\n  1. It will have the following fields: title, author, year, genre_id (refering to the genre type from that table)and user_id (this will be the user who has this book) **HINT** like a foreign key, 'member?\\n  2. All fields are required!\\n  3. Add 10 books, each of your users should have 2 books\\n     ]\\n\\n---\\n\\nclass: middle center\\n\\n## HandsOnChallenge\\n\\n.left[\\n\\n1. Query 'books' to show title, and user's fullname that has checked out this book\\n2. Query 'books' and show a total count of books by genre with the genre type(group by) ordered from most to least\\n3. Query 'users' to show fullname, book title, authory, and genre type. Order by book title.\\n   ]\\n\\n---\\n\\nclass: middle center\\n\\n### Pirates HandsOnChallenge\\n\\n.left-column[\\n\\n.left[\\n\\n###### Pirates - 10\\n\\n1. Family Name\\n2. Rank\\n3. Beard (Boolean)\\n4. Nick Name\\n5. Birth Country\\n6. Worth. (Value in shillings)\\n7. Date of Death\\n8. Primary Key(Pirate_Id)\\n   ] ]\\n\\n.right-column[\\n\\n##### Ships - 10\\n\\n9. Crew Size\\n10. Name\\n11. Ship Class\\n12. Number of Cannons\\n13. Primary Key(Ship_id)\\n\\n##### Ownerships table\\n\\n1. Primary Key(owner_id)\\n2. Country Of Origin\\n3. Current Owner, must be pirate. _HINT_ Foreign Key(Pirate_Id)\\n4. Ship Reference (Foreign Key Ship_Id)\\n\\n]\\n\"},\"fields\":{\"slug\":\"/courses/database basics/slides/more-rdms/\"}}}]}},\"pathContext\":{\"slug\":\"/courses/database basics/slides/more-rdms/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/courses-database-basics-slides-more-rdms.json\n// module id = 411\n// module chunks = 227116428326523"],"sourceRoot":""}