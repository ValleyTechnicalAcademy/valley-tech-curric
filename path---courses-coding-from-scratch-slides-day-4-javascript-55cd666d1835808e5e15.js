webpackJsonp([0x97bddf390135],{379:function(n,a){n.exports={data:{allMarkdownRemark:{edges:[{node:{html:'<p>class: middle center</p>\n<h1>Intro to JavaScript</h1>\n<hr>\n<p>class: middle</p>\n<h1>The meat</h1>\n<h3>JavaScript, the core language (ECMAScript)</h3>\n<ul>\n<li>ECMAScript such as ES3, ES5, and <del>ES6</del> ES 2015</li>\n<li>Runs all the places</li>\n<li>object oriented programming (OOP)</li>\n<li>C++, Object Pascal, Java, Python, PHP</li>\n<li>functional programing</li>\n<li>Common Lisp, Scheme, Clojure, Erlang, OCaml, Haskell, and F#</li>\n</ul>\n<p>???\nOOP -> inheritance for code reuse and extensibility in the form of either\nclasses or prototypes. Composition, inheritance, and delegation Polymorphism FP\n-> calling a function f twice with the same value for an argument x will produce\nthe same result f(x) each time First-class and higher-order functions Pure\nfunctions Recursion</p>\n<hr>\n<p>class: middle</p>\n<h1>So which is Javascript ?</h1>\n<p><img src="https://emojipedia-us.s3.amazonaws.com/thumbs/120/google/119/confused-face_1f615.png" alt="confused"></p>\n<blockquote>\n<p>Prototype-based programming is a style of object-oriented programming in which\nclasses are not present, and behavior reuse (known as inheritance in\nclass-based languages) is performed via a process of cloning existing objects\nthat serve as prototypes. This model can also be known as classless,\nprototype-oriented or instance-based programming.</p>\n</blockquote>\n<hr>\n<p>class: middle</p>\n<h1>JavaScript is a loosely typed or a dynamic language.</h1>\n<ul>\n<li>which means you do not declare the data types of variables explicitly.</li>\n<li>In many cases JavaScript performs conversions automatically when they are needed.</li>\n</ul>\n<hr>\n<p>class: middle</p>\n<h2>JS Types</h2>\n<h3>Six data types that are primitives:</h3>\n<ul>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number</li>\n<li>String</li>\n<li>Symbol (new in ECMAScript 6)</li>\n<li>Object</li>\n</ul>\n<hr>\n<p>class: middle</p>\n<h2>JS Variables</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token string">"sedan"</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Bobby"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">"Smith"</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h2>JS Logging &#x26; Alerts</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token string">"sedan"</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Bobby"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">"Smith"</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"My name is "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h2>JS Prompts</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> yourName <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"What is your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'Hello \'</span> <span class="token operator">+</span> yourName <span class="token operator">+</span> <span class="token string">\'! Nice to meet you.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h2>IF / Else Statements</h2>\n<ul>\n<li>\n<p>Crucial to programming</p>\n</li>\n<li>\n<p>Can be an IF, or an ELSE IF, or ELSE</p>\n</li>\n<li>\n<h2>Uses { }</h2>\n<p>class: middle</p>\n</li>\n</ul>\n<h2>If / Else Exercise</h2>\n<ol>\n<li>\n<p>Prompt the user and ask them “What is your favorite band?” and store their response in a variable.</p>\n</li>\n<li>\n<p>Create an if / else statement that compares their response with your favorite band.</p>\n</li>\n<li>\n<p>If the bands match, alert “Awesome! Me too!”</p>\n</li>\n<li>\n<p>If they do NOT match, say “That’s cool… I guess”</p>\n</li>\n</ol>\n<hr>\n<p>class: middle</p>\n<h2>JS Arrays</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> zooAnimals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'zebra\'</span><span class="token punctuation">,</span> <span class="token string">\'rhino\'</span><span class="token punctuation">,</span> <span class="token string">\'giraffe\'</span><span class="token punctuation">,</span> <span class="token string">\'owl\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class:middle</p>\n<h2>JS Arrays</h2>\n<ul>\n<li>\n<p>Arrays a type of variable that are collections.</p>\n</li>\n<li>\n<p>These collections can be made up of strings, numbers, Booleans, other arrays, objects, anything.</p>\n</li>\n<li>\n<p>Each element of the array is marked by an index. Indexes always start with 0.</p>\n</li>\n</ul>\n<hr>\n<p>class: center\n<img src="https://i.imgur.com/VRSkSGd.jpg"></p>\n<hr>\n<p>class: middle</p>\n<h2>JS Arrays</h2>\n<ul>\n<li>\n<p>To recover the value at any specific index you include the name of the array with a square bracket [ ] and inside the bracket is the element’s index.  </p>\n</li>\n<li>\n<p>You can easily grab the number of elements in the array using the method array.length</p>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> zooAnimals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'zebra\'</span><span class="token punctuation">,</span> <span class="token string">\'rhino\'</span><span class="token punctuation">,</span> <span class="token string">\'giraffe\'</span><span class="token punctuation">,</span> <span class="token string">\'owl\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zooAnimals<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zooAnimals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zooAnimals<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class:middle</p>\n<h2>JS Array Exercise</h2>\n<h4>Create an array of 5 of your favorite bands.</h4>\n<ol>\n<li>\n<p>Log the First band onto the console.</p>\n</li>\n<li>\n<p>Log the 3rd band onto the console.</p>\n</li>\n<li>\n<p>Try to Log out the 6th band in the array (it does not exist!) What happens instead?</p>\n</li>\n</ol>\n<hr>\n<p>class: middle</p>\n<h2>Refactoring + JS Methods</h2>\n<ul>\n<li>\n<p>Let’s rewrite our code to use our array of bands.</p>\n</li>\n<li>\n<p>Delete the If / Else statement.</p>\n</li>\n<li>\n<p>Rewrite it using our <code>bands</code> array and <code>indexOf()</code></p>\n</li>\n</ul>\n<hr>\n<p>class: middle</p>\n<h2>JS Objects</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> josuesCar <span class="token operator">=</span> <span class="token punctuation">{</span>\n    make<span class="token punctuation">:</span> <span class="token string">"Scion"</span><span class="token punctuation">,</span>\n    model<span class="token punctuation">:</span> <span class="token string">"xB"</span><span class="token punctuation">,</span>\n    year<span class="token punctuation">:</span> <span class="token number">2006</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>\n    run<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Vroom vroom!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h2>JS Object Exercise</h2>\n<ul>\n<li>Create an object of your car or dream car</li>\n<li>Tell us the make, model, year, color, years owned, 2 functions: run, stop</li>\n<li>\n<h2>Using dot notation, log out the same information onto the console</h2>\n<p>class: middle</p>\n</li>\n</ul>\n<h2>JS Functions</h2>\n<blockquote>\n<p>execute, do something You can reuse code: Define the code once, and use it\nmany times.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Function is called, return value will end up in x</span>\n<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token comment">// Function returns the product of a and b</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">z</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//function expression</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>???\nA JavaScript function is defined with the function keyword, followed by a name,\nfollowed by parentheses (). Function names can contain letters, digits,\nunderscores, and dollar signs (same rules as variables). The parentheses may\ninclude parameter names separated by commas: (parameter1, parameter2, …) The\ncode to be executed, by the function, is placed inside curly brackets: {}\nfunction name(parameter1, parameter2, parameter3) { code to be executed }\nFunction parameters are the names listed in the function definition. Function\narguments are the real values received by the function when it is invoked.\nInside the function, the arguments (the parameters) behave as local variables.</p>\n<hr>\n<p>class: middle</p>\n<h2>Create a function</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">addDivideByTwo</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//result = 10</span>\n</code></pre>\n      </div>\n<p>???</p>\n<p>Answer Town</p>\n<p>function addDivideByTwo(num1, num2) { return ((num1 + num2) / 2); }</p>\n<hr>\n<p>class: middle</p>\n<h1>Scope</h1>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hoist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">hoist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h1>Hoisting</h1>\n<blockquote>\n<p>Function declarations are hoisted over variable declarations but not over\nvariable assignments.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> double<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> double<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output type: ?</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h1>JS ES 2015</h1>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">sameFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<hr>\n<p>class: middle</p>\n<h1>JS Scope and Context</h1>\n<h3>Global Scope</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Billy Bob"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'Billy Bob\'</span>\n\n<span class="token keyword">function</span> <span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'name\' is accessible here and everywhere else</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'Billy Bob\'</span>\n</code></pre>\n      </div>',internal:{content:'---\ntitle: "DAY 4 - JavaScript Brings Brainpower"\ncourseId:  "CFSG105"\ncirriculum:\n  - "Web / Full Stack / Software Development"\ntype: "slide"\ndraft: false\n---\nclass: middle center\n# Intro to JavaScript\n\n---\n\nclass: middle\n\n# The meat\n\n### JavaScript, the core language (ECMAScript)\n\n* ECMAScript such as ES3, ES5, and ~~ES6~~ ES 2015\n* Runs all the places\n* object oriented programming (OOP)\n* C++, Object Pascal, Java, Python, PHP\n* functional programing\n* Common Lisp, Scheme, Clojure, Erlang, OCaml, Haskell, and F#\n\n???\nOOP -> inheritance for code reuse and extensibility in the form of either\nclasses or prototypes. Composition, inheritance, and delegation Polymorphism FP\n-> calling a function f twice with the same value for an argument x will produce\nthe same result f(x) each time First-class and higher-order functions Pure\nfunctions Recursion\n\n---\n\nclass: middle\n\n# So which is Javascript ?\n\n![confused](https://emojipedia-us.s3.amazonaws.com/thumbs/120/google/119/confused-face_1f615.png)\n\n> Prototype-based programming is a style of object-oriented programming in which\n> classes are not present, and behavior reuse (known as inheritance in\n> class-based languages) is performed via a process of cloning existing objects\n> that serve as prototypes. This model can also be known as classless,\n> prototype-oriented or instance-based programming.\n\n---\n\nclass: middle\n\n# JavaScript is a loosely typed or a dynamic language.\n\n* which means you do not declare the data types of variables explicitly.\n* In many cases JavaScript performs conversions automatically when they are needed.\n\n---\n\nclass: middle\n\n## JS Types\n\n### Six data types that are primitives:\n\n* Boolean\n* Null\n* Undefined\n* Number\n* String\n* Symbol (new in ECMAScript 6)\n* Object\n\n---\n\nclass: middle\n\n## JS Variables\n\n```JavaScript\nvar car = "sedan";\nlet name = "Bobby";\nconst lastName = "Smith";\n```\n\n---\nclass: middle\n## JS Logging & Alerts\n\n```JavaScript\nvar car = "sedan";\nlet name = "Bobby";\nconst lastName = "Smith";\n\nconsole.log(car);\nconsole.log(lastName);\nalert(name);\nalert("My name is " + name);\n```\n---\nclass: middle\n## JS Prompts\n\n```JavaScript\nvar yourName = prompt("What is your name?");\nalert(\'Hello \' + yourName + \'! Nice to meet you.\');\n```\n\n---\nclass: middle\n## IF / Else Statements\n\n* Crucial to programming\n\n* Can be an IF, or an ELSE IF, or ELSE\n\n* Uses { }\n---\nclass: middle\n\n## If / Else Exercise\n\n1. Prompt the user and ask them “What is your favorite band?” and store their response in a variable.\n\n2. Create an if / else statement that compares their response with your favorite band.\n\n3. If the bands match, alert “Awesome! Me too!”\n\n4. If they do NOT match, say “That’s cool… I guess”\n\n---\n\n\nclass: middle\n## JS Arrays\n\n```JavaScript\nvar zooAnimals = [\'zebra\', \'rhino\', \'giraffe\', \'owl\'];\n```\n---\nclass:middle\n## JS Arrays\n\n- Arrays a type of variable that are collections.\n\n- These collections can be made up of strings, numbers, Booleans, other arrays, objects, anything.\n\n- Each element of the array is marked by an index. Indexes always start with 0.\n\n---\nclass: center\n![](https://i.imgur.com/VRSkSGd.jpg)\n---\nclass: middle\n## JS Arrays\n\n- To recover the value at any specific index you include the name of the array with a square bracket [ ] and inside the bracket is the element’s index.  \n\n- You can easily grab the number of elements in the array using the method array.length\n\n```Javascript\nvar zooAnimals = [\'zebra\', \'rhino\', \'giraffe\', \'owl\'];\nconsole.log(zooAnimals[2]);\nconsole.log(zooAnimals[0]);\nconsole.log(zooAnimals.length);\n```\n---\nclass:middle\n## JS Array Exercise\n\n#### Create an array of 5 of your favorite bands.\n\n1. Log the First band onto the console.\n\n2. Log the 3rd band onto the console.\n\n3. Try to Log out the 6th band in the array (it does not exist!) What happens instead?\n\n---\nclass: middle\n## Refactoring + JS Methods\n\n- Let’s rewrite our code to use our array of bands.\n\n- Delete the If / Else statement.\n\n- Rewrite it using our `bands` array and `indexOf()`\n\n---\nclass: middle\n## JS Objects\n\n```JavaScript\nvar josuesCar = {\n    make: "Scion",\n    model: "xB",\n    year: 2006,\n    color: "black",\n    run: function() {\n        console.log(\'Vroom vroom!\');\n    }\n}\n```\n---\nclass: middle\n## JS Object Exercise\n\n- Create an object of your car or dream car\n- Tell us the make, model, year, color, years owned, 2 functions: run, stop\n- Using dot notation, log out the same information onto the console\n---\nclass: middle\n\n## JS Functions\n\n> execute, do something You can reuse code: Define the code once, and use it\n> many times.\n\n```javascript\nlet x = myFunction(4, 3); // Function is called, return value will end up in x\nfunction myFunction(a, b) {\n  return a * b; // Function returns the product of a and b\n}\n\nlet z = function(a, b) {\n  //function expression\n  return a * b;\n};\n```\n\n???\nA JavaScript function is defined with the function keyword, followed by a name,\nfollowed by parentheses (). Function names can contain letters, digits,\nunderscores, and dollar signs (same rules as variables). The parentheses may\ninclude parameter names separated by commas: (parameter1, parameter2, ...) The\ncode to be executed, by the function, is placed inside curly brackets: {}\nfunction name(parameter1, parameter2, parameter3) { code to be executed }\nFunction parameters are the names listed in the function definition. Function\narguments are the real values received by the function when it is invoked.\nInside the function, the arguments (the parameters) behave as local variables.\n\n---\n\nclass: middle\n\n## Create a function\n\n```javascript\nlet result = addDivideByTwo(16, 4); //result = 10\n```\n\n???\n\nAnswer Town\n\nfunction addDivideByTwo(num1, num2) { return ((num1 + num2) / 2); }\n\n---\n\nclass: middle\n\n# Scope\n\n```javascript\nfunction hoist() {\n  a = 20;\n  var b = 100;\n}\nhoist();\nconsole.log(a);\n/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/\nconsole.log(b);\n```\n\n---\n\nclass: middle\n\n# Hoisting\n\n> Function declarations are hoisted over variable declarations but not over\n> variable assignments.\n\n```javascript\nvar double;\n\nfunction double(num) {\n  return num * 2;\n}\n\nconsole.log(typeof double); // Output type: ?\n```\n\n---\n\nclass: middle\n\n# JS ES 2015\n\n```javascript\nlet x = myFunction(4, 3);\n\nlet myFunction = (a, b) => a * b;\n\nfunction sameFunction(a, b) {\n  return a * b;\n}\n```\n\n---\n\nclass: middle\n\n# JS Scope and Context\n\n### Global Scope\n\n```javascript\nvar name = "Billy Bob";\nconsole.log(name); // logs \'Billy Bob\'\n\nfunction logName() {\n  console.log(name); // \'name\' is accessible here and everywhere else\n}\n\nlogName(); // logs \'Billy Bob\'\n```\n'},fields:{slug:"/courses/coding-from-scratch/slides/day4-javascript/"}}}]}},pathContext:{slug:"/courses/coding-from-scratch/slides/day4-javascript/"}}}});
//# sourceMappingURL=path---courses-coding-from-scratch-slides-day-4-javascript-55cd666d1835808e5e15.js.map