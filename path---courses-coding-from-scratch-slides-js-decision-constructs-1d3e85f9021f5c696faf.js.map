{"version":3,"sources":["webpack:///path---courses-coding-from-scratch-slides-js-decision-constructs-1d3e85f9021f5c696faf.js","webpack:///./.cache/json/courses-coding-from-scratch-slides-js-decision-constructs.json"],"names":["webpackJsonp","405","module","exports","data","allMarkdownRemark","edges","node","html","internal","content","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,mBAAqBC,QAAUC,MAAQC,KAAA,ktiBAAs1jBC,UAAwDC,QAAA,kgJAA6iJC,QAAWC,KAAA,oEAA0EC,aAAgBD,KAAA","file":"path---courses-coding-from-scratch-slides-js-decision-constructs-1d3e85f9021f5c696faf.js","sourcesContent":["webpackJsonp([80663984625363],{\n\n/***/ 405:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>class: middle</p>\\n<h1>Boolean Logic</h1>\\n<h3>It’s true or false, right?</h3>\\n<hr>\\n<p>class: middle</p>\\n<h1>Naming, variables like</h1>\\n<ul>\\n<li>var hasThing;</li>\\n<li>let isOfThing;</li>\\n<li>const hasEnabledThing;</li>\\n</ul>\\n<hr>\\n<p>class: middle</p>\\n<h1>Boolean Operators</h1>\\n<ul>\\n<li>\\n<p>&#x26;&#x26; (AND)</p>\\n<ul>\\n<li>both must evaluate to true</li>\\n</ul>\\n</li>\\n<li>\\n<p>|| (OR)</p>\\n<ul>\\n<li>only one needs to evaluate to true</li>\\n</ul>\\n</li>\\n<li>\\n<p>! (NOT)</p>\\n<ul>\\n<li>inverts the bool</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle</p>\\n<h2>Examples</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token boolean\\\">true</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is true</span>\\n\\n<span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is false</span>\\n\\n<span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is true</span>\\n\\n<span class=\\\"token operator\\\">!</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is false</span>\\n\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ??</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Relational Operators</h1>\\n<ul>\\n<li>\\n<p>Greater Than, Less Than</p>\\n<ul>\\n<li><code>> &#x3C; >= &#x3C;=</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Not equal</p>\\n<ul>\\n<li><code>!=</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Equality</p>\\n<ul>\\n<li><code>==</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Wha?</p>\\n<ul>\\n<li><code>===</code></li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h1>So it’s pretty straight forward…</h1>\\n<p>—</p>\\n<h1>Truthy or Falsey</h1>\\n<hr>\\n<p>class: middle</p>\\n<h2>We get the following as the so-called “falsy” values:</h2>\\n<ul>\\n<li>undefined</li>\\n<li>null</li>\\n<li>false</li>\\n<li>+0, -0, and NaN</li>\\n<li>\\\"\\\"</li>\\n</ul>\\n<h3>what’s <em>NaN</em> ?</h3>\\n<hr>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//Todo's</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Boolean</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//What is d ? True or False ?</span>\\n<span class=\\\"token keyword\\\">var</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Boolean</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">&amp;&amp;</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> e <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// empty array -- truthy or falsy?</span>\\n<span class=\\\"token keyword\\\">var</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// empty object -- truthy or falsy?</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// empty function -- truthy or falsy?</span>\\n<span class=\\\"token comment\\\">//What is 'pants' True or False ?</span>\\n<span class=\\\"token keyword\\\">var</span> pants <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Boolean</span><span class=\\\"token punctuation\\\">(</span>e <span class=\\\"token operator\\\">&amp;&amp;</span> f <span class=\\\"token operator\\\">&amp;&amp;</span> g<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Decision Constructs</h1>\\n<ul>\\n<li>if and if-else statements</li>\\n<li>flow control</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> evaluateSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateSomething<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">doStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//Evaluates the condition. In this case the value of \\\"evaluateSomething\\\"</span>\\n<span class=\\\"token comment\\\">//this will execute if the condition is true</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Decision Constructs</h1>\\n<ul>\\n<li>and the if-else</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> evaluateSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateSomething<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">doStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">otherwiseDoThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Decision Constructs</h1>\\n<ul>\\n<li>and the else if part</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> evaluateSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> evaluateOtherThing <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateSomething<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">doStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateOtherThing<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">otherwiseDoThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h3>Nested if Statements :frowning:</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    CodeBlock#<span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        CodeBlock#<span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            CodeBlock#<span class=\\\"token number\\\">3</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                CodeBlock#<span class=\\\"token number\\\">4</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    CodeBlock#<span class=\\\"token number\\\">5</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token punctuation\\\">{</span>\\n                        CodeBlock#<span class=\\\"token number\\\">6</span>\\n                        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token punctuation\\\">{</span>\\n                            CodeBlock#<span class=\\\"token number\\\">7</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Ternary Operator (?:)</h1>\\n<h2><code>condition ? if-true-execute-this : if-false-execute-this;</code></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> now <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> greeting <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Good\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>now<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">17</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">\\\" evening.\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\" day.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// greeting will evaluate to \\\"Good day.\\\"</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h2>JS distinguishes expressions and statements</h2>\\n<ul>\\n<li>\\n<h2>Expression: produces a value</h2>\\n</li>\\n<li>\\n<h2>Statements: performs an action</h2>\\n</li>\\n</ul>\\n<hr>\\n<h1>Todo</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">dinnerMenu</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Having meat loaf\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Having ice cream\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">//TODO</span>\\n<span class=\\\"token comment\\\">//Call the the function 3 separate times</span>\\n<span class=\\\"token comment\\\">//Once with a string, number, and a boolean</span>\\n<span class=\\\"token comment\\\">//Be sure to get ice cream for dinner each time!</span>\\n</code></pre>\\n      </div>\\n<h2><a href=\\\"http://jsbin.com/hamiyow/1/edit?js,console\\\">Second Lab</a></h2>\\n<hr>\\n<p>class: middle</p>\\n<h1>Strings and Template Literals</h1>\\n<ul>\\n<li>\\n<p>Useful string methods</p>\\n<ul>\\n<li><code>split()</code></li>\\n<li><code>toLowerCase()</code></li>\\n<li><code>trim()</code></li>\\n<li><code>replace()</code></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\\\">Learn More!</a></li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle</p>\\n<h1>String concatenation</h1>\\n<ul>\\n<li><code>\\\"kittens\\\" + \\\"are cute\\\"</code> // kittensare cute</li>\\n<li><code>\\\"dogs \\\" + \\\"are fine\\\"</code> // dogs are fine</li>\\n</ul>\\n<p>—</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> pants <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"dockers\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"I wear \\\"</span> <span class=\\\"token operator\\\">+</span> pants<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// I wear dockers</span>\\n\\n<span class=\\\"token comment\\\">//ES2015</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`I wear </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>pants<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// I wear dockers</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h2>Math</h2>\\n<ul>\\n<li>there are some math methods</li>\\n<li>when you need one, look it up, no really</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Returns a random integer between min (included) and max (included)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getRandomInt</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>max <span class=\\\"token operator\\\">-</span> min <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> min<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\",\"internal\":{\"content\":\"---\\ntitle: \\\"JavaScript Decision Constructs\\\" \\ncourseId:  \\\"CFSG105\\\"\\ncirriculum: \\n  - \\\"Web / Full Stack / Software Development\\\"\\ntype: \\\"slide\\\"\\ndraft: false\\n---\\n\\nclass: middle\\n\\n# Boolean Logic\\n\\n### It's true or false, right?\\n\\n---\\n\\nclass: middle\\n\\n# Naming, variables like\\n\\n* var hasThing;\\n* let isOfThing;\\n* const hasEnabledThing;\\n\\n---\\n\\nclass: middle\\n\\n# Boolean Operators\\n\\n* && (AND)\\n  * both must evaluate to true\\n* || (OR)\\n  * only one needs to evaluate to true\\n* ! (NOT)\\n  * inverts the bool\\n\\n---\\n\\nclass: middle\\n\\n## Examples\\n\\n```javascript\\ntrue && true; //output is true\\n\\nfalse && true; //output is false\\n\\nfalse || true; //output is true\\n\\n!true; //output is false\\n\\n(false && !false) || true; // ??\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Relational Operators\\n\\n* Greater Than, Less Than\\n  * `> < >= <=`\\n* Not equal\\n  * `!=`\\n* Equality\\n  * `==`\\n* Wha?\\n  * `===`\\n\\n---\\n\\nclass: middle center\\n\\n# So it's pretty straight forward....\\n\\n--\\n\\n# Truthy or Falsey\\n\\n---\\n\\nclass: middle\\n\\n## We get the following as the so-called \\\"falsy\\\" values:\\n\\n* undefined\\n* null\\n* false\\n* +0, -0, and NaN\\n* \\\"\\\"\\n\\n### what's _NaN_ ?\\n\\n---\\n\\n```js\\n//Todo's\\nvar a = new Boolean(false);\\nvar b = new Number(0);\\nvar c = new String(\\\"\\\");\\n//What is d ? True or False ?\\nvar d = Boolean(a && b && c);\\n\\nvar e = []; // empty array -- truthy or falsy?\\nvar f = {}; // empty object -- truthy or falsy?\\nvar g = function() {}; // empty function -- truthy or falsy?\\n//What is 'pants' True or False ?\\nvar pants = Boolean(e && f && g);\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Decision Constructs\\n\\n* if and if-else statements\\n* flow control\\n\\n```javascript\\nconst evaluateSomething = true;\\n\\nif (evaluateSomething) {\\n  doStuff();\\n}\\n\\n//Evaluates the condition. In this case the value of \\\"evaluateSomething\\\"\\n//this will execute if the condition is true\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Decision Constructs\\n\\n* and the if-else\\n\\n```javascript\\nconst evaluateSomething = false;\\n\\nif (evaluateSomething) {\\n  doStuff();\\n} else {\\n  otherwiseDoThis();\\n}\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Decision Constructs\\n\\n* and the else if part\\n\\n```javascript\\nconst evaluateSomething = false;\\nconst evaluateOtherThing = true;\\n\\nif (evaluateSomething) {\\n  doStuff();\\n} else if (evaluateOtherThing) {\\n  otherwiseDoThis();\\n}\\n```\\n\\n---\\n\\n### Nested if Statements :frowning:\\n\\n```js\\nif (Check#1)\\n{\\n    CodeBlock#1\\n    if (Check#2)\\n    {\\n        CodeBlock#2\\n        if (Check#3)\\n        {\\n            CodeBlock#3\\n            if (Check#4)\\n            {\\n                CodeBlock#4\\n                if (Check#5)\\n                {\\n                    CodeBlock#5\\n                    if (Check#6)\\n                    {\\n                        CodeBlock#6\\n                        if (Check#7)\\n                        {\\n                            CodeBlock#7\\n}\\n```\\n\\n---\\n\\nclass: middle\\n\\n#Ternary Operator (?:)\\n`condition ? if-true-execute-this : if-false-execute-this;`\\n--\\n\\n```js\\nvar now = new Date();\\nvar greeting = \\\"Good\\\" + (now.getHours() > 17 ? \\\" evening.\\\" : \\\" day.\\\");\\n// greeting will evaluate to \\\"Good day.\\\"\\n```\\n\\n---\\n\\nclass: middle\\n\\n## JS distinguishes expressions and statements\\n\\n* ## Expression: produces a value\\n\\n* ## Statements: performs an action\\n\\n---\\n\\n#Todo\\n\\n```js\\nfunction dinnerMenu(item) {\\n  if (!item) {\\n    console.log(\\\"Having meat loaf\\\");\\n  } else {\\n    console.log(\\\"Having ice cream\\\");\\n  }\\n}\\n//TODO\\n//Call the the function 3 separate times\\n//Once with a string, number, and a boolean\\n//Be sure to get ice cream for dinner each time!\\n```\\n\\n## [Second Lab](http://jsbin.com/hamiyow/1/edit?js,console)\\n\\n---\\n\\nclass: middle\\n\\n# Strings and Template Literals\\n\\n* Useful string methods\\n  * `split()`\\n  * `toLowerCase()`\\n  * `trim()`\\n  * `replace()`\\n  * [Learn More!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\n\\n---\\n\\nclass: middle\\n\\n# String concatenation\\n\\n* `\\\"kittens\\\" + \\\"are cute\\\"` // kittensare cute\\n* `\\\"dogs \\\" + \\\"are fine\\\"` // dogs are fine\\n\\n--\\n\\n```javascript\\nconst pants = \\\"dockers\\\";\\n\\nconsole.log(\\\"I wear \\\" + pants); // I wear dockers\\n\\n//ES2015\\nconsole.log(`I wear ${pants}`); // I wear dockers\\n```\\n\\n---\\n\\nclass: middle\\n\\n## Math\\n\\n* there are some math methods\\n* when you need one, look it up, no really\\n\\n```javascript\\n// Returns a random integer between min (included) and max (included)\\n\\nfunction getRandomInt(min, max) {\\n  return Math.floor(Math.random() * (max - min + 1)) + min;\\n}\\n```\\n\\n---\\n\"},\"fields\":{\"slug\":\"/courses/coding-from-scratch/slides/JS-Decision-Constructs/\"}}}]}},\"pathContext\":{\"slug\":\"/courses/coding-from-scratch/slides/JS-Decision-Constructs/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---courses-coding-from-scratch-slides-js-decision-constructs-1d3e85f9021f5c696faf.js","module.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>class: middle</p>\\n<h1>Boolean Logic</h1>\\n<h3>It’s true or false, right?</h3>\\n<hr>\\n<p>class: middle</p>\\n<h1>Naming, variables like</h1>\\n<ul>\\n<li>var hasThing;</li>\\n<li>let isOfThing;</li>\\n<li>const hasEnabledThing;</li>\\n</ul>\\n<hr>\\n<p>class: middle</p>\\n<h1>Boolean Operators</h1>\\n<ul>\\n<li>\\n<p>&#x26;&#x26; (AND)</p>\\n<ul>\\n<li>both must evaluate to true</li>\\n</ul>\\n</li>\\n<li>\\n<p>|| (OR)</p>\\n<ul>\\n<li>only one needs to evaluate to true</li>\\n</ul>\\n</li>\\n<li>\\n<p>! (NOT)</p>\\n<ul>\\n<li>inverts the bool</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle</p>\\n<h2>Examples</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token boolean\\\">true</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is true</span>\\n\\n<span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is false</span>\\n\\n<span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is true</span>\\n\\n<span class=\\\"token operator\\\">!</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//output is false</span>\\n\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ??</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Relational Operators</h1>\\n<ul>\\n<li>\\n<p>Greater Than, Less Than</p>\\n<ul>\\n<li><code>> &#x3C; >= &#x3C;=</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Not equal</p>\\n<ul>\\n<li><code>!=</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Equality</p>\\n<ul>\\n<li><code>==</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Wha?</p>\\n<ul>\\n<li><code>===</code></li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle center</p>\\n<h1>So it’s pretty straight forward…</h1>\\n<p>—</p>\\n<h1>Truthy or Falsey</h1>\\n<hr>\\n<p>class: middle</p>\\n<h2>We get the following as the so-called “falsy” values:</h2>\\n<ul>\\n<li>undefined</li>\\n<li>null</li>\\n<li>false</li>\\n<li>+0, -0, and NaN</li>\\n<li>\\\"\\\"</li>\\n</ul>\\n<h3>what’s <em>NaN</em> ?</h3>\\n<hr>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//Todo's</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Boolean</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//What is d ? True or False ?</span>\\n<span class=\\\"token keyword\\\">var</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Boolean</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">&amp;&amp;</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> e <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// empty array -- truthy or falsy?</span>\\n<span class=\\\"token keyword\\\">var</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// empty object -- truthy or falsy?</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// empty function -- truthy or falsy?</span>\\n<span class=\\\"token comment\\\">//What is 'pants' True or False ?</span>\\n<span class=\\\"token keyword\\\">var</span> pants <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Boolean</span><span class=\\\"token punctuation\\\">(</span>e <span class=\\\"token operator\\\">&amp;&amp;</span> f <span class=\\\"token operator\\\">&amp;&amp;</span> g<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Decision Constructs</h1>\\n<ul>\\n<li>if and if-else statements</li>\\n<li>flow control</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> evaluateSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateSomething<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">doStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//Evaluates the condition. In this case the value of \\\"evaluateSomething\\\"</span>\\n<span class=\\\"token comment\\\">//this will execute if the condition is true</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Decision Constructs</h1>\\n<ul>\\n<li>and the if-else</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> evaluateSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateSomething<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">doStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">otherwiseDoThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Decision Constructs</h1>\\n<ul>\\n<li>and the else if part</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> evaluateSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> evaluateOtherThing <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateSomething<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">doStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>evaluateOtherThing<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">otherwiseDoThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h3>Nested if Statements :frowning:</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    CodeBlock#<span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        CodeBlock#<span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            CodeBlock#<span class=\\\"token number\\\">3</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                CodeBlock#<span class=\\\"token number\\\">4</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    CodeBlock#<span class=\\\"token number\\\">5</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token punctuation\\\">{</span>\\n                        CodeBlock#<span class=\\\"token number\\\">6</span>\\n                        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Check#<span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token punctuation\\\">{</span>\\n                            CodeBlock#<span class=\\\"token number\\\">7</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h1>Ternary Operator (?:)</h1>\\n<h2><code>condition ? if-true-execute-this : if-false-execute-this;</code></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> now <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> greeting <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Good\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>now<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">17</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">\\\" evening.\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\" day.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// greeting will evaluate to \\\"Good day.\\\"</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h2>JS distinguishes expressions and statements</h2>\\n<ul>\\n<li>\\n<h2>Expression: produces a value</h2>\\n</li>\\n<li>\\n<h2>Statements: performs an action</h2>\\n</li>\\n</ul>\\n<hr>\\n<h1>Todo</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">dinnerMenu</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Having meat loaf\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Having ice cream\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">//TODO</span>\\n<span class=\\\"token comment\\\">//Call the the function 3 separate times</span>\\n<span class=\\\"token comment\\\">//Once with a string, number, and a boolean</span>\\n<span class=\\\"token comment\\\">//Be sure to get ice cream for dinner each time!</span>\\n</code></pre>\\n      </div>\\n<h2><a href=\\\"http://jsbin.com/hamiyow/1/edit?js,console\\\">Second Lab</a></h2>\\n<hr>\\n<p>class: middle</p>\\n<h1>Strings and Template Literals</h1>\\n<ul>\\n<li>\\n<p>Useful string methods</p>\\n<ul>\\n<li><code>split()</code></li>\\n<li><code>toLowerCase()</code></li>\\n<li><code>trim()</code></li>\\n<li><code>replace()</code></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\\\">Learn More!</a></li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>class: middle</p>\\n<h1>String concatenation</h1>\\n<ul>\\n<li><code>\\\"kittens\\\" + \\\"are cute\\\"</code> // kittensare cute</li>\\n<li><code>\\\"dogs \\\" + \\\"are fine\\\"</code> // dogs are fine</li>\\n</ul>\\n<p>—</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> pants <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"dockers\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"I wear \\\"</span> <span class=\\\"token operator\\\">+</span> pants<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// I wear dockers</span>\\n\\n<span class=\\\"token comment\\\">//ES2015</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`I wear </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>pants<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// I wear dockers</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<p>class: middle</p>\\n<h2>Math</h2>\\n<ul>\\n<li>there are some math methods</li>\\n<li>when you need one, look it up, no really</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Returns a random integer between min (included) and max (included)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getRandomInt</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>max <span class=\\\"token operator\\\">-</span> min <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> min<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\",\"internal\":{\"content\":\"---\\ntitle: \\\"JavaScript Decision Constructs\\\" \\ncourseId:  \\\"CFSG105\\\"\\ncirriculum: \\n  - \\\"Web / Full Stack / Software Development\\\"\\ntype: \\\"slide\\\"\\ndraft: false\\n---\\n\\nclass: middle\\n\\n# Boolean Logic\\n\\n### It's true or false, right?\\n\\n---\\n\\nclass: middle\\n\\n# Naming, variables like\\n\\n* var hasThing;\\n* let isOfThing;\\n* const hasEnabledThing;\\n\\n---\\n\\nclass: middle\\n\\n# Boolean Operators\\n\\n* && (AND)\\n  * both must evaluate to true\\n* || (OR)\\n  * only one needs to evaluate to true\\n* ! (NOT)\\n  * inverts the bool\\n\\n---\\n\\nclass: middle\\n\\n## Examples\\n\\n```javascript\\ntrue && true; //output is true\\n\\nfalse && true; //output is false\\n\\nfalse || true; //output is true\\n\\n!true; //output is false\\n\\n(false && !false) || true; // ??\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Relational Operators\\n\\n* Greater Than, Less Than\\n  * `> < >= <=`\\n* Not equal\\n  * `!=`\\n* Equality\\n  * `==`\\n* Wha?\\n  * `===`\\n\\n---\\n\\nclass: middle center\\n\\n# So it's pretty straight forward....\\n\\n--\\n\\n# Truthy or Falsey\\n\\n---\\n\\nclass: middle\\n\\n## We get the following as the so-called \\\"falsy\\\" values:\\n\\n* undefined\\n* null\\n* false\\n* +0, -0, and NaN\\n* \\\"\\\"\\n\\n### what's _NaN_ ?\\n\\n---\\n\\n```js\\n//Todo's\\nvar a = new Boolean(false);\\nvar b = new Number(0);\\nvar c = new String(\\\"\\\");\\n//What is d ? True or False ?\\nvar d = Boolean(a && b && c);\\n\\nvar e = []; // empty array -- truthy or falsy?\\nvar f = {}; // empty object -- truthy or falsy?\\nvar g = function() {}; // empty function -- truthy or falsy?\\n//What is 'pants' True or False ?\\nvar pants = Boolean(e && f && g);\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Decision Constructs\\n\\n* if and if-else statements\\n* flow control\\n\\n```javascript\\nconst evaluateSomething = true;\\n\\nif (evaluateSomething) {\\n  doStuff();\\n}\\n\\n//Evaluates the condition. In this case the value of \\\"evaluateSomething\\\"\\n//this will execute if the condition is true\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Decision Constructs\\n\\n* and the if-else\\n\\n```javascript\\nconst evaluateSomething = false;\\n\\nif (evaluateSomething) {\\n  doStuff();\\n} else {\\n  otherwiseDoThis();\\n}\\n```\\n\\n---\\n\\nclass: middle\\n\\n# Decision Constructs\\n\\n* and the else if part\\n\\n```javascript\\nconst evaluateSomething = false;\\nconst evaluateOtherThing = true;\\n\\nif (evaluateSomething) {\\n  doStuff();\\n} else if (evaluateOtherThing) {\\n  otherwiseDoThis();\\n}\\n```\\n\\n---\\n\\n### Nested if Statements :frowning:\\n\\n```js\\nif (Check#1)\\n{\\n    CodeBlock#1\\n    if (Check#2)\\n    {\\n        CodeBlock#2\\n        if (Check#3)\\n        {\\n            CodeBlock#3\\n            if (Check#4)\\n            {\\n                CodeBlock#4\\n                if (Check#5)\\n                {\\n                    CodeBlock#5\\n                    if (Check#6)\\n                    {\\n                        CodeBlock#6\\n                        if (Check#7)\\n                        {\\n                            CodeBlock#7\\n}\\n```\\n\\n---\\n\\nclass: middle\\n\\n#Ternary Operator (?:)\\n`condition ? if-true-execute-this : if-false-execute-this;`\\n--\\n\\n```js\\nvar now = new Date();\\nvar greeting = \\\"Good\\\" + (now.getHours() > 17 ? \\\" evening.\\\" : \\\" day.\\\");\\n// greeting will evaluate to \\\"Good day.\\\"\\n```\\n\\n---\\n\\nclass: middle\\n\\n## JS distinguishes expressions and statements\\n\\n* ## Expression: produces a value\\n\\n* ## Statements: performs an action\\n\\n---\\n\\n#Todo\\n\\n```js\\nfunction dinnerMenu(item) {\\n  if (!item) {\\n    console.log(\\\"Having meat loaf\\\");\\n  } else {\\n    console.log(\\\"Having ice cream\\\");\\n  }\\n}\\n//TODO\\n//Call the the function 3 separate times\\n//Once with a string, number, and a boolean\\n//Be sure to get ice cream for dinner each time!\\n```\\n\\n## [Second Lab](http://jsbin.com/hamiyow/1/edit?js,console)\\n\\n---\\n\\nclass: middle\\n\\n# Strings and Template Literals\\n\\n* Useful string methods\\n  * `split()`\\n  * `toLowerCase()`\\n  * `trim()`\\n  * `replace()`\\n  * [Learn More!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\n\\n---\\n\\nclass: middle\\n\\n# String concatenation\\n\\n* `\\\"kittens\\\" + \\\"are cute\\\"` // kittensare cute\\n* `\\\"dogs \\\" + \\\"are fine\\\"` // dogs are fine\\n\\n--\\n\\n```javascript\\nconst pants = \\\"dockers\\\";\\n\\nconsole.log(\\\"I wear \\\" + pants); // I wear dockers\\n\\n//ES2015\\nconsole.log(`I wear ${pants}`); // I wear dockers\\n```\\n\\n---\\n\\nclass: middle\\n\\n## Math\\n\\n* there are some math methods\\n* when you need one, look it up, no really\\n\\n```javascript\\n// Returns a random integer between min (included) and max (included)\\n\\nfunction getRandomInt(min, max) {\\n  return Math.floor(Math.random() * (max - min + 1)) + min;\\n}\\n```\\n\\n---\\n\"},\"fields\":{\"slug\":\"/courses/coding-from-scratch/slides/JS-Decision-Constructs/\"}}}]}},\"pathContext\":{\"slug\":\"/courses/coding-from-scratch/slides/JS-Decision-Constructs/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/courses-coding-from-scratch-slides-js-decision-constructs.json\n// module id = 405\n// module chunks = 80663984625363"],"sourceRoot":""}